[buildout]
#extends =
#    versions.cfg

parts +=
    pyramid
    omelette
    test
    python
    code-analysis
    coverage
    test-coverage

allow-hosts =
    *localhost*
    *.python.org

code-analysis = ${buildout:directory}/parts/code-analysis
test-eggs = postkasterl[test]
test-directories = src/postkasterl

show-picked-versions = true

develop = .

[pyramid]
recipe = zc.recipe.egg:scripts
dependent-scripts = true
eggs =
    postkasterl
    ipdb

[omelette]
recipe = collective.recipe.omelette
eggs = ${pyramid:eggs}

[test]
recipe = zc.recipe.testrunner
eggs =
    ${buildout:test-eggs}
    ipdb

[python]
recipe = zc.recipe.egg
eggs =
    ${pyramid:eggs}
interpreter = py

# Code analysis part (pre-commit is git only)
[code-analysis]
recipe = plone.recipe.codeanalysis
directory = ${buildout:directory}/src/postkasterl
pre-commit-hook = True
flake8 = True
flake8-extensions =
    flake8-coding
flake8-exclude = bootstrap.py,docs,*.egg,*.cpy,*.vpy,overrides
flake8-max-complexity = 12
# flake8-ignore = C901
# Deprecation warnings
deprecated-aliases = True
# Conventions
clean-lines = True
imports = True
pep3101 = True
debug-statements = False
# i18n
return-status-codes = True

[coverage]
recipe = zc.recipe.egg
eggs = coverage
interpreter = ${buildout:directory}/bin/py


[test-coverage]
recipe = collective.recipe.template
input = inline:
    #!/bin/sh
    # Remove old results
    echo "Erase old coverage results."
    bin/coverage erase
    # Collect test coverage results for all packages
    echo "Run test coverage analysis for all packages."
    DIRECTORIES="${buildout:test-directories}"
    for pkgdir in $DIRECTORIES
    do
        # Runs a code coverage analysis on top of the "jenkins-test" script for
        # all packages. The data will be collected in a ".coverage" output file
        # in the buildout directory.
        echo "Analyse $pkgdir"
        bin/coverage run -p --source=$pkgdir bin/test --all
    done
    echo "Create test coverage report."
    # Combine all package analysis
    bin/coverage combine
    # Generates a "coverage.xml" file that Jenkins can read and process from the
    # ".coverage" file that the coverage report created.
    bin/coverage html -i -d ${buildout:directory}/parts/coverage/
    echo "Test coverage report finished."
output = ${buildout:directory}/bin/test-coverage
mode = 755

